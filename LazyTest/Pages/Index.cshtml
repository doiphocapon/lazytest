@page
@using LazyTest.Models;
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <div class="row">
        <div class="col-lg-12">
            <div class="input-group">

                <input id="SiteMapUrl" class="form-control" type="url" placeholder="Site map URL or domain (e.g., https://example.com/sitemap.xml)" class="form-control" patten="[Hh][Tt][Tt][Pp][Ss]?:\/\/(?:(?:[a-zA-Z\u00a1-\uffff0-9]+-?)*[a-zA-Z\u00a1-\uffff0-9]+)(?:\.(?:[a-zA-Z\u00a1-\uffff0-9]+-?)*[a-zA-Z\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,}))(?::\d{2,5})?(?:\/[^\s]*)?" />
                <span class="input-group-btn">

                    <button type="button" id="startButton" class="btn btn-primary" onclick="runTest()">Run a Test</button>
                    <button type="button" id="runInBackGround" class="btn btn-primary d-none" onclick="runTestInBackGround()">Run in the background</button>
                    <a data-bs-toggle="collapse" class="btn btn-secondary" href="#options" role="button" aria-expanded="false" aria-controls="options">
                        Options
                    </a>
                </span>
            </div><!-- /input-group -->
            <div class="collapse" id="options">
                <div class="col-lg-6">
                    <div class="input-group">
                       
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" role="switch" id="withdomcount">
                            <label class="form-check-label" for="withdomcount">With DOM count </label>
                        </div>
                    </div>
                    <div class="input-group">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" role="switch" id="withimages">
                            <label class="form-check-label" for="withimages">With Images </label>
                        </div>
                    </div>

                </div>
            </div>
        </div><!-- /.col-lg-6 -->
    </div>

   

</div>
<div class="row">
    <div class="col-lg-12">
        <div class="d-none progress" style="margin-top:10px;margin-bottom:10px;">
            <div id="progessBar" class="progress-bar" role="progressbar" style="width: 0%;"></div>
        </div>
    </div>

</div>
<a href="" id="reportLink" class="btn btn-primary d-none">Report</a>
<table id="resultTable" class="resultTable d-none" border="1" cellpadding="1" width="100%">
    <thead>
        <tr style="background-color:darkslategray;color:white">
            <td>Url</td>
            <td>Status</td>
            <td>Content length</td>
            <td>DOM count</td>
            <td>Response time (ms)</td>

        </tr>
    </thead>
    <tbody>
        <!-- Table rows will be dynamically added here -->
    </tbody>
</table>

<script>
    var thissiteId = 0;
    var runinbackground = false;
    var currentUrl = "";
    
    async function runTest() {
        const url = document.getElementById("SiteMapUrl").value
        const withImage = document.getElementById("withimages").checked;
        const withdDomcount = document.getElementById("withdomcount").checked;
        if (url != "") {
            await testStarted();
            await testWebsite(url, withdDomcount, withImage);
            await testStopped();
        }
        else {

            alert("Please enter a sitemap url or domain");
        }
    }
     async function runTestInBackGround() {
       
         runinbackground = true;
        const withImage = document.getElementById("withimages").checked;
        const withdDomcount = document.getElementById("withdomcount").checked;
        const url = "/api/runsiteinbackground?itemurl=" + currentUrl + "&siteid=" + thissiteId + "&domcount=" + withdDomcount+"image="+withImage;
        const response = await fetch(url);
        if (response.ok) {
            testStopped();
           

        }
      
    }


    async function testWebsite(sitemapUrl,withDomCount, withImage) {

        setProgessBar(0, 0, "initializing");
        const url = "/api/testsite?image=" + withImage + "&sitemapurl=" + sitemapUrl;
        const response = await fetch(url);
        if (!response.ok) {
            testStopped();
            throw new Error(`Error to get the sitemap of${sitemapUrl}`);

        }
        const data = await response.json();
        const siteid = data.SiteId
        thissiteId = siteid;
        var i = 0;
        for (const element of data.Urls) {
            currentUrl = element;
            if (runinbackground==true)
            {
                break;
            }
            await getData(element, siteid, withDomCount);
            i++;
            setProgessBar(i, data.Urls.length);
        }

    }
    async function getData(itemurl, siteid,withDomCount) {
        const url = "/api/testitem?itemurl=" + itemurl + "&siteid=" + siteid + "&domcount=" + withDomCount;
        try {
            const response = await fetch(url);
            if (!response.ok) {
                console.error(`Response status: ${response.status}`);
            }
            const json = await response.json();
            appendJsonData(json);
        } catch (error) {
            console.error(error.message);

        }
    }
    async function appendJsonData(data) {

        const tableBody = document.getElementById('resultTable').getElementsByTagName('tbody')[0];

        const statusCode = `<span class="${data.StatusCode}">${data.StatusCode}</span>`;
        if (data.StatusCode != data.LastStatusCode) {
            statusCode = `<span class="${data.StatusCode}">${data.StatusCode}</span>/<span class="${data.LastStatusCode}">${data.LastStatusCode}</span>`;
        }

        const contentLength = toKilobytes(data.ContentLength)
        if (data.ContentLength != data.LastContentLength) {
            contentLength += "/" + data.LastContentLength;
        }

        const DOMCount = data.DOMCount;
        if (data.DOMCount != data.LastDOMCount) {
            DOMCount += "/" + data.LastDOMCount;
        }
        const ResponseTime = data.ResponseTime;

        if (data.ResponseTime != data.LastResponseTime) {
            ResponseTime += "/" + data.LastResponseTime;
        }

        var tr = document.createElement('tr');
        tr.innerHTML = '<td><a target="_new" href=' + data.Url + '>' + data.Url + '</a></td>' +
            '<td>' + statusCode + '</td>' +
            '<td align="center">' + contentLength + '</td>' +
            '<td align="certer">' + DOMCount + '</td>' +
            '<td align="certer" >' + Math.floor(ResponseTime) + '</td>';
       // tableBody.appendChild(tr);
        tableBody.insertBefore(tr, tableBody.firstChild);

    }
    async function setProgessBar(now, total) {
        const progressBar = document.getElementById('progessBar');
        if (total == 0) {
            progressBar.parentElement.classList = "initializing";
            
             return;
            
        }
        const percentage = (now / total) * 100;

    progressBar.parentElement.classList = "progress";
        progressBar.style.width = percentage + '%';
        progressBar.textContent = Math.round(percentage) + '%' + ' (' + total + ' items)';
    }
    async function testStarted() {
        const startButton = document.getElementById('startButton');
           const runInBackGround = document.getElementById('runInBackGround');
            runInBackGround.classList = "btn btn-primary";

        startButton.disabled = true; // Disable the button
        const resultTable = document.getElementById('resultTable');
        const tableBody = resultTable.getElementsByTagName('tbody')[0];
        const reportButton = document.getElementById('reportLink');
        reportButton.classList = "d-none";
        tableBody.innerHTML = ''; // Clear all rows in the table body
        resultTable.classList = "resultTable"
        setProgessBar(0, 0)
    }
    async function testStopped() {
        const startButton = document.getElementById('startButton');
        startButton.disabled = false;
        const reportButton = document.getElementById('reportLink');
        reportButton.classList = "btn btn-primary";
        const runInBackGround = document.getElementById('runInBackGround');
        runInBackGround.classList = "d-none";


        reportButton.href = "/testsite?id=" + thissiteId;
    }
   
    function toKilobytes(bytes) {
        if (bytes <= 0) {
            return 0;
        }
        var returnValue = Math.floor(bytes / 1024);
        if (returnValue > 0) {
            return returnValue + " KB";
        }
        else {
            return bytes + " B";
        }
    }

</script>